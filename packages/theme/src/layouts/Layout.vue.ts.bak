<template>
  <div
    :class="pageClasses"
    class="theme-container"
    @touchend="onTouchEnd"
    @touchstart="onTouchStart"
  >
    <Password v-if="globalEncrypt && !globalDescrypted" @enter="globalPassword = $event.value" />
    <template v-else>
      <Navbar v-if="shouldShowNavbar" @toggle-sidebar="toggleSidebar" />

      <div class="sidebar-mask" @click="toggleSidebar(false)" />

      <Sidebar :items="sidebarItems" @toggle-sidebar="toggleSidebar">
        <slot slot="top" name="sidebar-top" />
        <slot slot="bottom" name="sidebar-bottom" />
      </Sidebar>

      <Password
        v-if="configEncrypt && !configDescrypted && !globalDescrypted"
        @enter="setPassword"
      />

      <Home v-else-if="$page.frontmatter.home" />

      <Page v-else :sidebar-items="sidebarItems">
        <slot slot="top" name="page-top" />
        <slot slot="bottom" name="page-bottom" />
      </Page>
    </template>
  </div>
</template>

<script lang='ts'>
import { Component, Prop, Vue } from 'vue-property-decorator';
import { EncryptOptions } from '../globals';
import Home from '@theme/components/Home.vue';
import Navbar from '@theme/components/Navbar.vue';
import Page from '@theme/components/Page.vue';
import Password from '@theme/components/Password.vue';
import Sidebar from '@parent-theme/components/Sidebar.vue';
import { resolveSidebarItems } from '@theme/util';


@Component({ components: { Home, Page, Password, Sidebar, Navbar } })
export default class Layout extends Vue {
  private isSidebarOpen = false;

  private globalPassword = '';

  private passwordConfig: Record<string, string> = {};

  private touchStart: Record<string, number> = {};

  private get encryptOption(): EncryptOptions {
    return this.$themeConfig.encrypt;
  }

  /** 是否全局加密 */
  private get globalEncrypt() {
    return Boolean(this.encryptOption && this.encryptOption.globalEncrypt);
  }

  /** 是否已经解密 */
  private get globalDescrypted() {
    if (this.encryptOption) {
      const { global } = this.encryptOption;
      /** 全局密码 */
      const globalPassword: string[] = global ? typeof global === 'string' ? [global] : global : [];

      /** 全局密码匹配结果 */
      const result = globalPassword.filter(
        password => this.globalPassword === password
      );

      return result.length !== 0;
    }

    return false;
  }

  /** 配置项命中项 */
  private get encryptHitItems() {
    if (this.encryptOption && typeof this.encryptOption.config === 'object') {
      /** 配置键名 */
      const keys = Object.keys(this.encryptOption.config);

      /** 命中键名 */
      const hitKeys = keys.filter(key => this.$route.path.indexOf(key) === 0);

      return hitKeys.sort((x, y) => y.length - x.length);
    }

    return [];
  }

  /** 由配置项判断是否加密 */
  private get configEncrypt() {
    return this.encryptHitItems.length !== 0;
  }

  /** 当前命中配置项是否已经解密 */
  private get configDescrypted() {
    if (this.configEncrypt) {
      /** 配置项 */
      const { config } = this.encryptOption;

      /** 正确键值 */
      const correctKeys = this.encryptHitItems.filter(key => {
        /** 命中的密码 */
        const hitPasswords: string[] =
          typeof (config as any)[key] === 'string'
            ? [(config as Record<string, string>)[key]]
            : (config as Record<string, string[]>)[key];

        /** 比较结果 */
        const result = hitPasswords.filter(
          password => this.passwordConfig[key] === password
        );

        return result.length !== 0;
      });

      return correctKeys.length !== 0;
    }

    return false;
  }

  private get shouldShowNavbar() {
    const themeConfig = this.$site.themeConfig || {};
    const { frontmatter } = this.$page;

    if (frontmatter.navbar === false || themeConfig.navbar === false)
      return false;

    return (
      this.$title ||
      themeConfig.logo ||
      themeConfig.repo ||
      themeConfig.nav ||
      this.$themeLocaleConfig.nav
    );
  }

  private get shouldShowSidebar() {
    const { frontmatter } = this.$page;

    return (
      !frontmatter.home &&
      frontmatter.sidebar !== false &&
      this.sidebarItems.length
    );
  }

  private get sidebarItems() {
    return resolveSidebarItems(
      this.$page,
      this.$page.regularPath,
      this.$site,
      this.$localePath
    );
  }

  private get pageClasses() {
    const userPageClass = this.$page.frontmatter.pageClass;

    return [
      {
        'no-navbar': !this.shouldShowNavbar,
        'sidebar-open': this.isSidebarOpen,
        'no-sidebar': !this.shouldShowSidebar
      },
      userPageClass
    ];
  }

  private mounted() {
    this.$router.afterEach(() => {
      this.isSidebarOpen = false;
    });
  }

  private toggleSidebar(to: any) {
    this.isSidebarOpen = typeof to === 'boolean' ? to : !this.isSidebarOpen;
    this.$emit('toggle-sidebar', this.isSidebarOpen);
  }

  // Side swipe
  private onTouchStart(e: TouchEvent) {
    this.touchStart = {
      x: e.changedTouches[0].clientX,
      y: e.changedTouches[0].clientY
    };
  }

  private onTouchEnd(e: TouchEvent) {
    const dx = e.changedTouches[0].clientX - this.touchStart.x;
    const dy = e.changedTouches[0].clientY - this.touchStart.y;

    if (Math.abs(dx) > Math.abs(dy) && Math.abs(dx) > 40)
      if (dx > 0 && this.touchStart.x <= 80) this.toggleSidebar(true);
      else this.toggleSidebar(false);
  }

  private setPassword(password: string) {
    const { config } = this.encryptOption;

    if (config)
      for (let i = 0; i < this.encryptHitItems.length; i++) {
        /** 命中键值 */
        const hitKey = this.encryptHitItems[i];
        /** 命中密码配置 */
        const hitPassword = config[hitKey];
        /** 命中密码列表 */
        const hitPasswordList =
          typeof hitPassword === 'string' ? [hitPassword] : hitPassword;

        /** 比较结果 */
        const result = hitPasswordList.filter(item => password === item);
        console.log(result);

        // 出现匹配
        if (result.length !== 0) {
          this.$set(this.passwordConfig, hitKey, password);

          break;
        }
      }
  }
}
</script>
